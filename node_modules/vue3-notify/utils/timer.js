export class Timer {
    constructor(callback, delay, notifItem) {
        Object.defineProperty(this, "start", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "remaining", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "notifyItem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "callback", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.remaining = delay;
        this.callback = callback;
        this.notifyItem = notifItem;
        this.resume();
    }
    pause() {
        if (this.notifyItem.timer !== undefined) {
            clearTimeout(this.notifyItem.timer);
        }
        this.remaining -= Date.now() - this.start;
    }
    resume() {
        this.start = Date.now();
        if (this.notifyItem.timer !== undefined) {
            clearTimeout(this.notifyItem.timer);
        }
        this.notifyItem.timer = setTimeout(this.callback, this.remaining);
    }
}
