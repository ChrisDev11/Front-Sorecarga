{"ast":null,"code":"const floatRegexp = '[-+]?[0-9]*.?[0-9]+';\nconst types = [{\n  name: 'px',\n  regexp: new RegExp(`^${floatRegexp}px$`)\n}, {\n  name: '%',\n  regexp: new RegExp(`^${floatRegexp}%$`)\n},\n/**\n * Fallback option\n * If no suffix specified, assigning \"px\"\n */\n{\n  name: 'px',\n  regexp: new RegExp(`^${floatRegexp}$`)\n}];\nconst getType = value => {\n  if (value === 'auto') {\n    return {\n      type: value,\n      value: 0\n    };\n  }\n  for (const type of types) {\n    if (type.regexp.test(value)) {\n      return {\n        type: type.name,\n        value: Number.parseFloat(value)\n      };\n    }\n  }\n  return {\n    type: '',\n    value\n  };\n};\nexport const parseNumericValue = value => {\n  switch (typeof value) {\n    case 'number':\n      return {\n        type: 'px',\n        value\n      };\n    case 'string':\n      return getType(value);\n    default:\n      return {\n        type: '',\n        value\n      };\n  }\n};","map":{"version":3,"names":["floatRegexp","types","name","regexp","RegExp","getType","value","type","test","Number","parseFloat","parseNumericValue"],"sources":["C:/Users/11/Desktop/frontend/node_modules/vue3-notify/utils/parser.js"],"sourcesContent":["const floatRegexp = '[-+]?[0-9]*.?[0-9]+';\nconst types = [\n    {\n        name: 'px',\n        regexp: new RegExp(`^${floatRegexp}px$`),\n    },\n    {\n        name: '%',\n        regexp: new RegExp(`^${floatRegexp}%$`),\n    },\n    /**\n     * Fallback option\n     * If no suffix specified, assigning \"px\"\n     */\n    {\n        name: 'px',\n        regexp: new RegExp(`^${floatRegexp}$`),\n    },\n];\nconst getType = (value) => {\n    if (value === 'auto') {\n        return {\n            type: value,\n            value: 0,\n        };\n    }\n    for (const type of types) {\n        if (type.regexp.test(value)) {\n            return {\n                type: type.name,\n                value: Number.parseFloat(value),\n            };\n        }\n    }\n    return {\n        type: '',\n        value,\n    };\n};\nexport const parseNumericValue = (value) => {\n    switch (typeof value) {\n        case 'number':\n            return { type: 'px', value };\n        case 'string':\n            return getType(value);\n        default:\n            return { type: '', value };\n    }\n};\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,qBAAqB;AACzC,MAAMC,KAAK,GAAG,CACV;EACIC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,IAAIC,MAAM,CAAE,IAAGJ,WAAY,KAAI;AAC3C,CAAC,EACD;EACIE,IAAI,EAAE,GAAG;EACTC,MAAM,EAAE,IAAIC,MAAM,CAAE,IAAGJ,WAAY,IAAG;AAC1C,CAAC;AACD;AACJ;AACA;AACA;AACI;EACIE,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,IAAIC,MAAM,CAAE,IAAGJ,WAAY,GAAE;AACzC,CAAC,CACJ;AACD,MAAMK,OAAO,GAAIC,KAAK,IAAK;EACvB,IAAIA,KAAK,KAAK,MAAM,EAAE;IAClB,OAAO;MACHC,IAAI,EAAED,KAAK;MACXA,KAAK,EAAE;IACX,CAAC;EACL;EACA,KAAK,MAAMC,IAAI,IAAIN,KAAK,EAAE;IACtB,IAAIM,IAAI,CAACJ,MAAM,CAACK,IAAI,CAACF,KAAK,CAAC,EAAE;MACzB,OAAO;QACHC,IAAI,EAAEA,IAAI,CAACL,IAAI;QACfI,KAAK,EAAEG,MAAM,CAACC,UAAU,CAACJ,KAAK;MAClC,CAAC;IACL;EACJ;EACA,OAAO;IACHC,IAAI,EAAE,EAAE;IACRD;EACJ,CAAC;AACL,CAAC;AACD,OAAO,MAAMK,iBAAiB,GAAIL,KAAK,IAAK;EACxC,QAAQ,OAAOA,KAAK;IAChB,KAAK,QAAQ;MACT,OAAO;QAAEC,IAAI,EAAE,IAAI;QAAED;MAAM,CAAC;IAChC,KAAK,QAAQ;MACT,OAAOD,OAAO,CAACC,KAAK,CAAC;IACzB;MACI,OAAO;QAAEC,IAAI,EAAE,EAAE;QAAED;MAAM,CAAC;EAClC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}