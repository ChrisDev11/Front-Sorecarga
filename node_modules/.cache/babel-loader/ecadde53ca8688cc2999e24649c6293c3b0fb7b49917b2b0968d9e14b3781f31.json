{"ast":null,"code":"export default {\n  name: 'SlidePanel',\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    visible: {\n      type: Boolean,\n      required: true\n    },\n    cart: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: ['update:visible', 'update:cart'],\n  methods: {\n    closePanel() {\n      this.$emit('update:visible', false);\n    },\n    removeFromCart(item) {\n      // Encontre o índice do item no carrinho\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        // Se o item existe no carrinho\n        if (this.cart[index].quantity > 1) {\n          // Se a quantidade for maior que 1, apenas diminua a quantidade em 1\n          this.cart[index].quantity--;\n        } else {\n          // Caso contrário, remova o item do carrinho\n          this.cart.splice(index, 1);\n        }\n\n        // Emita um evento para atualizar o carrinho no componente pai\n        this.$emit('update:cart', this.cart);\n      }\n    },\n    // Função para limpar um item do carrinho\n    clearItem(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        this.cart.splice(index, 1);\n        this.$emit('update:cart', this.cart);\n      }\n    },\n    // Função para aumentar a quantidade de um item\n    incrementQuantity(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        this.cart[index].quantity++;\n        this.$emit('update:cart', this.cart);\n      }\n    },\n    // Função para diminuir a quantidade de um item\n    decrementQuantity(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1 && this.cart[index].quantity > 1) {\n        this.cart[index].quantity--;\n        this.$emit('update:cart', this.cart);\n      }\n    },\n    // Função para Finalizar compra \n    checkout() {\n\n      // Falta lógica para finalizar a compra aqui\n    },\n    // REMOVE TODOS OS ITENS DO CARRINHO DE COMPRAS\n    clearCart() {\n      this.cart.splice(0);\n      this.$emit('update:cart', this.cart);\n    },\n    // Função para calcular o valor total do carrinho\n    calculateTotal() {\n      let total = 0;\n      this.cart.forEach(item => {\n        total += item.price * item.quantity;\n      });\n      return total.toFixed(2); // Arredonda o total para 2 casas decimais\n    }\n  }\n};","map":{"version":3,"names":["name","props","title","type","String","required","visible","Boolean","cart","Array","emits","methods","closePanel","$emit","removeFromCart","item","index","findIndex","cartItem","id","quantity","splice","clearItem","incrementQuantity","decrementQuantity","checkout","clearCart","calculateTotal","total","forEach","price","toFixed"],"sources":["C:\\Users\\11\\Desktop\\frontend\\src\\components\\SlidePanel.vue"],"sourcesContent":["<template>\r\n  <div class=\"panel-wrap\" :class=\"{ visible: visible }\">\r\n    <div class=\"panel\">\r\n      <div class=\"slide-panel\">\r\n        <div class=\"close-button\" @click=\"closePanel()\">X</div>\r\n        <div>\r\n          <h3>Carrinho</h3>\r\n          <ul>\r\n            <li v-for=\"item in cart\" :key=\"item.id\" class=\"cart-item\">\r\n              <div class=\"item-info\">\r\n                <img :src=\"item.image\" alt=\"Imagem do Produto\" />\r\n                {{ item.name }} - R$ {{ item.price * item.quantity }}\r\n              </div>\r\n              <div class=\"item-actions\">\r\n                <div class=\"quantity\">\r\n                  <button class=\"quantity-button\" @click=\"decrementQuantity(item)\">-</button>\r\n                  <span>{{ item.quantity }}</span>\r\n                  <button class=\"quantity-button\" @click=\"incrementQuantity(item)\">+</button>\r\n                </div>\r\n                <div class=\"clear-item-button\" @click=\"clearItem(item)\">X</div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div class=\"cart-total\">Total: R$ {{ calculateTotal() }}</div>\r\n          <button class=\"btn btn-danger\" @click=\"clearCart\">Limpar</button>\r\n          <button class=\"checkout-button\" @click=\"checkout\">Finalizar Compra</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: 'SlidePanel',\r\n  \r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    cart:{\r\n      type: Array,\r\n      required: true,\r\n    }\r\n  },\r\n  emits: ['update:visible', 'update:cart'],\r\n  \r\n  methods: {\r\n    closePanel() {\r\n      this.$emit('update:visible', false);\r\n    },\r\n\r\n    removeFromCart(item) {\r\n      // Encontre o índice do item no carrinho\r\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        // Se o item existe no carrinho\r\n        if (this.cart[index].quantity > 1) {\r\n          // Se a quantidade for maior que 1, apenas diminua a quantidade em 1\r\n          this.cart[index].quantity--;\r\n        } else {\r\n          // Caso contrário, remova o item do carrinho\r\n          this.cart.splice(index, 1);\r\n        }\r\n\r\n        // Emita um evento para atualizar o carrinho no componente pai\r\n        this.$emit('update:cart', this.cart);\r\n      }\r\n    },\r\n    // Função para limpar um item do carrinho\r\n    clearItem(item) {\r\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        this.cart.splice(index, 1);\r\n        this.$emit('update:cart', this.cart);\r\n      }\r\n    },\r\n    // Função para aumentar a quantidade de um item\r\n    incrementQuantity(item) {\r\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        this.cart[index].quantity++;\r\n        this.$emit('update:cart', this.cart);\r\n      }\r\n    },\r\n\r\n    // Função para diminuir a quantidade de um item\r\n    decrementQuantity(item) {\r\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n      if (index !== -1 && this.cart[index].quantity > 1) {\r\n        this.cart[index].quantity--;\r\n        this.$emit('update:cart', this.cart);\r\n      }\r\n    },\r\n    // Função para Finalizar compra \r\n    checkout() {\r\n\r\n      // Falta lógica para finalizar a compra aqui\r\n    },\r\n\r\n\r\n    // REMOVE TODOS OS ITENS DO CARRINHO DE COMPRAS\r\n    clearCart() {\r\n      this.cart.splice(0);\r\n      \r\n      this.$emit('update:cart', this.cart);\r\n    },\r\n\r\n    // Função para calcular o valor total do carrinho\r\n    calculateTotal() {\r\n      let total = 0;\r\n      this.cart.forEach(item => {\r\n        total += item.price * item.quantity;\r\n      });\r\n      return total.toFixed(2); // Arredonda o total para 2 casas decimais\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style lang=\"scss\" scoped>\r\n.panel {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: #333;\r\n  color: #eee;\r\n  overflow: auto;\r\n  padding: 1em;\r\n\r\n  &-wrap {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    width: 30em;\r\n    transform: translateX(100%);\r\n    transition: 0.3s ease-out;\r\n\r\n    &.visible {\r\n      transform: translateX(0);\r\n    }\r\n  }\r\n\r\n  .close-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    color: #ff0000;\r\n  }\r\n\r\n  h3 {\r\n    color: #fff;\r\n  }\r\n\r\n  .cart-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    background-color: #444;\r\n  }\r\n\r\n  .item-info {\r\n    flex: 2;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    img {\r\n      max-width: 50px;\r\n      max-height: 50px;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n\r\n  .item-quantity {\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .quantity-button {\r\n      cursor: pointer;\r\n      font-size: 20px;\r\n      margin: 0 5px;\r\n      color: #fff;\r\n    }\r\n  }\r\n\r\n  .item-price {\r\n    flex: 1;\r\n    color: #fff;\r\n  }\r\n\r\n  .clear-item-button {\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    color: #ff0000;\r\n  }\r\n\r\n  .clear-cart-button {\r\n    margin-top: 20px;\r\n    background-color: #ff0000;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .checkout-button {\r\n    margin-top: 10px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    cursor: pointer;\r\n  }\r\n  .cart-total {\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  color: #fff;\r\n  text-align: right;\r\n  padding-right: 20px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}