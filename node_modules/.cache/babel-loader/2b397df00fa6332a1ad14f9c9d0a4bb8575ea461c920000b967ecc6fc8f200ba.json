{"ast":null,"code":"import is from '@sindresorhus/is';\n/**\n    Splits space/tab separated string into array and cleans empty string items.\n*/\nexport const splitWhitespace = value => {\n  if (typeof value !== 'string') {\n    return [];\n  }\n  return value.split(/\\s+/gi).filter(part => is.nonEmptyStringAndNotWhitespace(part));\n};\nconst directions = {\n  x: ['left', 'center', 'right'],\n  y: ['top', 'bottom']\n};\n/**\n    Cleans and transforms string of format \"x y\" into object {x, y}.\n    Possible combinations:\n        x - left, center, right\n        y - top, bottom\n*/\nexport const listToDirection = value => {\n  if (typeof value === 'string') {\n    value = splitWhitespace(value);\n  }\n  let x = null;\n  let y = null;\n  for (const v of value) {\n    if (directions.y.includes(v)) {\n      y = v;\n    }\n    if (directions.x.includes(v)) {\n      x = v;\n    }\n  }\n  return {\n    x,\n    y\n  };\n};","map":{"version":3,"names":["is","splitWhitespace","value","split","filter","part","nonEmptyStringAndNotWhitespace","directions","x","y","listToDirection","v","includes"],"sources":["C:/Users/11/Desktop/frontend/node_modules/vue3-notify/utils/direction.js"],"sourcesContent":["import is from '@sindresorhus/is';\n/**\n    Splits space/tab separated string into array and cleans empty string items.\n*/\nexport const splitWhitespace = (value) => {\n    if (typeof value !== 'string') {\n        return [];\n    }\n    return value\n        .split(/\\s+/gi)\n        .filter((part) => is.nonEmptyStringAndNotWhitespace(part));\n};\nconst directions = {\n    x: ['left', 'center', 'right'],\n    y: ['top', 'bottom'],\n};\n/**\n    Cleans and transforms string of format \"x y\" into object {x, y}.\n    Possible combinations:\n        x - left, center, right\n        y - top, bottom\n*/\nexport const listToDirection = (value) => {\n    if (typeof value === 'string') {\n        value = splitWhitespace(value);\n    }\n    let x = null;\n    let y = null;\n    for (const v of value) {\n        if (directions.y.includes(v)) {\n            y = v;\n        }\n        if (directions.x.includes(v)) {\n            x = v;\n        }\n    }\n    return { x, y };\n};\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AACjC;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACtC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAO,EAAE;EACb;EACA,OAAOA,KAAK,CACPC,KAAK,CAAC,OAAO,CAAC,CACdC,MAAM,CAAEC,IAAI,IAAKL,EAAE,CAACM,8BAA8B,CAACD,IAAI,CAAC,CAAC;AAClE,CAAC;AACD,MAAME,UAAU,GAAG;EACfC,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;EAC9BC,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIR,KAAK,IAAK;EACtC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3BA,KAAK,GAAGD,eAAe,CAACC,KAAK,CAAC;EAClC;EACA,IAAIM,CAAC,GAAG,IAAI;EACZ,IAAIC,CAAC,GAAG,IAAI;EACZ,KAAK,MAAME,CAAC,IAAIT,KAAK,EAAE;IACnB,IAAIK,UAAU,CAACE,CAAC,CAACG,QAAQ,CAACD,CAAC,CAAC,EAAE;MAC1BF,CAAC,GAAGE,CAAC;IACT;IACA,IAAIJ,UAAU,CAACC,CAAC,CAACI,QAAQ,CAACD,CAAC,CAAC,EAAE;MAC1BH,CAAC,GAAGG,CAAC;IACT;EACJ;EACA,OAAO;IAAEH,CAAC;IAAEC;EAAE,CAAC;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}