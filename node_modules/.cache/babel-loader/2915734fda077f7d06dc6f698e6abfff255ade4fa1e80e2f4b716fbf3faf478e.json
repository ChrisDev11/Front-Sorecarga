{"ast":null,"code":"import Vue from \"vue\";\nexport default {\n  name: 'SlidePanel',\n  data() {\n    return {\n      cart: []\n    };\n  },\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    visible: {\n      type: Boolean,\n      required: true\n    },\n    cart: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: ['update:visible', 'update:cart'],\n  methods: {\n    closePanel() {\n      this.$emit('update:visible', false);\n    },\n    removeFromCart(item) {\n      // Encontre o índice do item no carrinho\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        // Se o item existe no carrinho\n        if (this.cart[index].quantity > 1) {\n          // Se a quantidade for maior que 1, apenas diminua a quantidade em 1\n          this.cart[index].quantity--;\n        } else {\n          // Caso contrário, remova o item do carrinho\n          this.cart.splice(index, 1);\n        }\n\n        // Emita um evento para atualizar o carrinho no componente pai\n        this.$emit('update:cart', this.cart);\n      }\n    },\n    clearCart() {\n      // Limpa o carrinho (remove todos os itens)\n      Vue.set(this, 'cart', []);\n      // Emita um evento para atualizar o carrinho no componente pai\n      this.$emit('update:cart', this.cart);\n    }\n  }\n};","map":{"version":3,"names":["Vue","name","data","cart","props","title","type","String","required","visible","Boolean","Array","emits","methods","closePanel","$emit","removeFromCart","item","index","findIndex","cartItem","id","quantity","splice","clearCart","set"],"sources":["C:\\Users\\11\\Desktop\\frontend\\src\\components\\SlidePanel.vue"],"sourcesContent":["<template>\r\n  <div class=\"panel-wrap\" :class=\"{ visible: visible}\">\r\n    <div class=\"panel\">\r\n      <div>\r\n        <button class=\"btn btn-danger\" @click=\"closePanel()\">Fechar</button>\r\n        <h2>{{ title }}</h2>\r\n      </div>\r\n      <div>\r\n        <h3>Carrinho</h3>\r\n        <ul>\r\n          <li v-for=\"item in cart\" :key=\"item.id\">\r\n            {{ item.name }} ({{ item.quantity }}) - R$ {{ item.price * item.quantity }}\r\n            <button class=\"btn btn-danger\" @click=\"removeFromCart(item)\">Remover</button>\r\n          </li>\r\n        </ul>\r\n        <button class=\"btn btn-danger\" @click=\"clearCart\">Limpar</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n import Vue from \"vue\";\r\nexport default {\r\n \r\n\r\n  name: 'SlidePanel',\r\n  data(){\r\n    return{\r\n      cart:[],\r\n    }\r\n  },\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    cart:{\r\n      type: Array,\r\n      required: true,\r\n    }\r\n  },\r\n  emits: ['update:visible', 'update:cart'],\r\n  \r\n  methods: {\r\n    closePanel() {\r\n      this.$emit('update:visible', false);\r\n    },\r\n\r\n    removeFromCart(item) {\r\n      // Encontre o índice do item no carrinho\r\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        // Se o item existe no carrinho\r\n        if (this.cart[index].quantity > 1) {\r\n          // Se a quantidade for maior que 1, apenas diminua a quantidade em 1\r\n          this.cart[index].quantity--;\r\n        } else {\r\n          // Caso contrário, remova o item do carrinho\r\n          this.cart.splice(index, 1);\r\n        }\r\n\r\n        // Emita um evento para atualizar o carrinho no componente pai\r\n        this.$emit('update:cart', this.cart);\r\n      }\r\n    },\r\n    clearCart() {\r\n      // Limpa o carrinho (remove todos os itens)\r\n    Vue.set(this, 'cart', []);\r\n    // Emita um evento para atualizar o carrinho no componente pai\r\n    this.$emit('update:cart', this.cart);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style lang=\"scss\" scoped>\r\n.panel {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: #333;\r\n  color: #eee;\r\n  overflow: auto;\r\n  padding: 1em;\r\n\r\n  &-wrap {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    width: 30em;\r\n    transform: translateX(100%);\r\n    transition: 0.3s ease-out;\r\n\r\n    &.visible {\r\n      transform: translateX(0);\r\n    }\r\n  }\r\n}\r\n</style>"],"mappings":"AAsBC,OAAOA,GAAE,MAAO,KAAK;AACtB,eAAe;EAGbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAE;IACJ,OAAM;MACJC,IAAI,EAAC;IACP;EACF,CAAC;EACDC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,OAAO,EAAE;MACPH,IAAI,EAAEI,OAAO;MACbF,QAAQ,EAAE;IACZ,CAAC;IACDL,IAAI,EAAC;MACHG,IAAI,EAAEK,KAAK;MACXH,QAAQ,EAAE;IACZ;EACF,CAAC;EACDI,KAAK,EAAE,CAAC,gBAAgB,EAAE,aAAa,CAAC;EAExCC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC;IACrC,CAAC;IAEDC,cAAcA,CAACC,IAAI,EAAE;MACnB;MACA,MAAMC,KAAI,GAAI,IAAI,CAACf,IAAI,CAACgB,SAAS,CAACC,QAAO,IAAKA,QAAQ,CAACC,EAAC,KAAMJ,IAAI,CAACI,EAAE,CAAC;MAEtE,IAAIH,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB;QACA,IAAI,IAAI,CAACf,IAAI,CAACe,KAAK,CAAC,CAACI,QAAO,GAAI,CAAC,EAAE;UACjC;UACA,IAAI,CAACnB,IAAI,CAACe,KAAK,CAAC,CAACI,QAAQ,EAAE;QAC7B,OAAO;UACL;UACA,IAAI,CAACnB,IAAI,CAACoB,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;QAC5B;;QAEA;QACA,IAAI,CAACH,KAAK,CAAC,aAAa,EAAE,IAAI,CAACZ,IAAI,CAAC;MACtC;IACF,CAAC;IACDqB,SAASA,CAAA,EAAG;MACV;MACFxB,GAAG,CAACyB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC;MACzB;MACA,IAAI,CAACV,KAAK,CAAC,aAAa,EAAE,IAAI,CAACZ,IAAI,CAAC;IACpC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}