{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport Cookies from 'js-cookie';\nimport jwtDecode from \"jwt-decode\";\nimport SlidePanel from \"@/components/SlidePanel.vue\";\nexport default {\n  name: 'Navbar',\n  components: {\n    SlidePanel\n  },\n  // computed:{\n  //   isAdmin() {\n  //       // Coloque aqui a lógica para verificar se o usuário é administrador\n  //       // Você pode usar a mesma lógica que no seu guarda de navegação global\n  //       const authToken = Cookies.get(\"authToken\");\n  //       if (authToken) {\n  //         const decodedToken = jwtDecode(authToken);\n  //         const userIdFromToken = decodedToken.Id;\n  //         return userIdFromToken === \"9e72bbd1-55ea-44a0-a8ca-02d09e2ce8b6\";\n  //       }\n  //       return false;\n  //     },\n\n  // },\n\n  setup() {\n    const isAdmin = ref(false);\n    const authToken = Cookies.get(\"authToken\");\n    if (authToken) {\n      const decodedToken = jwtDecode(authToken);\n      const userIdFromToken = decodedToken.Id;\n      isAdmin.value = userIdFromToken === \"9e72bbd1-55ea-44a0-a8ca-02d09e2ce8b6\";\n    }\n    const teste2 = setInterval(toggleMenu, 250);\n    //console.log(\"Session\")\n    watch(isAdmin, newValue => {\n      if (newValue) {\n        clearInterval(teste2);\n        // console.log(\"Interval stopped\");\n      }\n    });\n\n    const loggedIn = ref(false); // Supondo que o usuário não está logado inicialmente\n\n    const router = useRouter();\n\n    // Verifica se o usuário está logado\n    // console.log(\"teste\"+loggedIn.value)\n\n    // Função para efetuar o logout\n    const logout = () => {\n      // Lógica para efetuar o logout (por exemplo, limpar o token e redirecionar)\n      Cookies.remove('authToken');\n      loggedIn.value = false;\n      router.push('/login'); // Redireciona para a página de login após o logout\n    };\n\n    const toggleMenu = () => {\n      if (Cookies.get('authToken')) {\n        loggedIn.value = true;\n\n        //  console.log(\"Authent\")\n      }\n    };\n\n    const teste = setInterval(toggleMenu, 250);\n    //console.log(\"Session\")\n    watch(loggedIn, newValue => {\n      if (newValue) {\n        clearInterval(teste);\n        // console.log(\"Interval stopped\");\n      }\n    });\n\n    return {\n      loggedIn,\n      logout,\n      isAdmin\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","useRouter","Cookies","jwtDecode","SlidePanel","name","components","setup","isAdmin","authToken","get","decodedToken","userIdFromToken","Id","value","teste2","setInterval","toggleMenu","newValue","clearInterval","loggedIn","router","logout","remove","push","teste"],"sources":["C:\\Users\\11\\Desktop\\frontend\\src\\components\\Navbar.vue"],"sourcesContent":["<template>\r\n  <!-- Navbar da logo, barra de pesquisa e Logins -->\r\n  <nav class=\"navbar navbar-expand-lg bg-dark\" aria-label=\"Thirteenth navbar example\">\r\n    <div class=\"container-fluid\">\r\n\r\n\r\n      <div class=\"navbar-collapse  d-lg-flex d-flex\" id=\"navbarsExample11\">\r\n        <!-- Logo -->\r\n        <router-link class=\"navbar-brand justify-content-center\" to=\"/\">\r\n          <img src=\"/img/logo.png\" alt=\"Home\" id=\"navbar-logo\">\r\n        </router-link>\r\n\r\n        <!-- Barra de Pesquisa / Falta Por Função -->\r\n        <div class=\"container-fluid  justify-content-center col-lg-5 me-5\">\r\n          <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" placeholder=\"O que você procura?\" aria-label=\"Search\">\r\n\r\n          </form>\r\n        </div>\r\n\r\n\r\n        <!-- Botão de Configurações (Mostrar apenas para o administrador) -->\r\n        <div v-if=\"isAdmin\" class=\"col-lg-1\">\r\n          <button class=\"btn btn-danger\">\r\n            <i class=\"fa-solid fa-gear\"></i>\r\n          </button>\r\n        </div>\r\n\r\n\r\n\r\n        <!-- Botão de Login / Logout -->\r\n        <div class=\"d-lg-flex col-lg-3 justify-content-lg-end\">\r\n          <!-- Verifica se o usuário está logado -->\r\n          <template v-if=\"!loggedIn.valueOf()\">\r\n            <!-- Link para a página de Login -->\r\n            <router-link to=\"/Login\" class=\"nav-link\" style=\"font-weight: bold; color: white;\">Entrar /\r\n              Cadastrar</router-link>\r\n          </template>\r\n          <template v-else-if=\"loggedIn.valueOf()\">\r\n            <!-- Botão para efetuar o logout -->\r\n            <a href=\"/Login\" class=\"link-danger\" @click=\"logout\" style=\"font-weight: bold; \">Sair</a>\r\n          </template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </nav>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport Cookies from 'js-cookie';\r\nimport jwtDecode from \"jwt-decode\";\r\nimport SlidePanel from \"@/components/SlidePanel.vue\"\r\n\r\nexport default {\r\n\r\n  name: 'Navbar',\r\n\r\n  components: {\r\n    SlidePanel\r\n  },\r\n\r\n// computed:{\r\n//   isAdmin() {\r\n//       // Coloque aqui a lógica para verificar se o usuário é administrador\r\n//       // Você pode usar a mesma lógica que no seu guarda de navegação global\r\n//       const authToken = Cookies.get(\"authToken\");\r\n//       if (authToken) {\r\n//         const decodedToken = jwtDecode(authToken);\r\n//         const userIdFromToken = decodedToken.Id;\r\n//         return userIdFromToken === \"9e72bbd1-55ea-44a0-a8ca-02d09e2ce8b6\";\r\n//       }\r\n//       return false;\r\n//     },\r\n    \r\n// },\r\n\r\n  setup() {\r\n    const isAdmin = ref(false);\r\n\r\n    \r\n      const authToken = Cookies.get(\"authToken\");\r\n      if (authToken) {\r\n        const decodedToken = jwtDecode(authToken);\r\n        const userIdFromToken = decodedToken.Id;\r\n        isAdmin.value = userIdFromToken === \"9e72bbd1-55ea-44a0-a8ca-02d09e2ce8b6\";\r\n      } \r\n      const teste2 = setInterval(toggleMenu, 250)\r\n    //console.log(\"Session\")\r\n    watch(isAdmin, (newValue) => {\r\n      if (newValue) {\r\n        clearInterval(teste2);\r\n        // console.log(\"Interval stopped\");\r\n      }\r\n    });\r\n   \r\n\r\n    const loggedIn = ref(false); // Supondo que o usuário não está logado inicialmente\r\n    \r\n    const router = useRouter();\r\n\r\n    // Verifica se o usuário está logado\r\n    // console.log(\"teste\"+loggedIn.value)\r\n\r\n \r\n    // Função para efetuar o logout\r\n    const logout = () => {\r\n      // Lógica para efetuar o logout (por exemplo, limpar o token e redirecionar)\r\n      Cookies.remove('authToken');\r\n      loggedIn.value = false;\r\n      router.push('/login'); // Redireciona para a página de login após o logout\r\n    };\r\n\r\n    const toggleMenu = () => {\r\n\r\n      if (Cookies.get('authToken')) {\r\n\r\n        loggedIn.value = true;\r\n\r\n        //  console.log(\"Authent\")\r\n\r\n      }\r\n\r\n    }\r\n    const teste = setInterval(toggleMenu, 250)\r\n    //console.log(\"Session\")\r\n    watch(loggedIn, (newValue) => {\r\n      if (newValue) {\r\n        clearInterval(teste);\r\n        // console.log(\"Interval stopped\");\r\n      }\r\n    });\r\n\r\n\r\n\r\n    return {\r\n      loggedIn,\r\n      logout,\r\n      isAdmin,\r\n    };\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style>\r\n.navbar {\r\n  background-color: #333;\r\n  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n  height: 60px;\r\n}\r\n\r\n#navbar-logo {\r\n  width: 100px;\r\n  height: auto;\r\n  margin-right: 10px;\r\n\r\n}\r\n\r\n#navbar-logo:hover {\r\n  transition: all 0.3s ease;\r\n  color: #ffffff;\r\n  padding-left: 8px;\r\n}\r\n\r\n.dropdown-toggle {\r\n  color: #fff;\r\n}\r\n\r\n.nav-link.disabled {\r\n  color: #6c757d;\r\n}\r\n\r\n.dropdown-item {\r\n  background: #262223;\r\n\r\n\r\n}\r\n\r\n.nav-item {\r\n  background: #F3F9FB;\r\n  border-radius: 18px;\r\n  font-family: Poppins;\r\n  font-size: 14px;\r\n  font-style: italic;\r\n  font-weight: 700;\r\n  line-height: 18px;\r\n  letter-spacing: 0em;\r\n  text-align: right;\r\n  margin-right: 30px;\r\n  display: flex;\r\n}\r\n</style>"],"mappings":";AAkDA,SAASA,GAAG,EAAEC,KAAI,QAAS,KAAK;AAChC,SAASC,SAAQ,QAAS,YAAY;AACtC,OAAOC,OAAM,MAAO,WAAW;AAC/B,OAAOC,SAAQ,MAAO,YAAY;AAClC,OAAOC,UAAS,MAAO,6BAA4B;AAEnD,eAAe;EAEbC,IAAI,EAAE,QAAQ;EAEdC,UAAU,EAAE;IACVF;EACF,CAAC;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEEG,KAAKA,CAAA,EAAG;IACN,MAAMC,OAAM,GAAIT,GAAG,CAAC,KAAK,CAAC;IAGxB,MAAMU,SAAQ,GAAIP,OAAO,CAACQ,GAAG,CAAC,WAAW,CAAC;IAC1C,IAAID,SAAS,EAAE;MACb,MAAME,YAAW,GAAIR,SAAS,CAACM,SAAS,CAAC;MACzC,MAAMG,eAAc,GAAID,YAAY,CAACE,EAAE;MACvCL,OAAO,CAACM,KAAI,GAAIF,eAAc,KAAM,sCAAsC;IAC5E;IACA,MAAMG,MAAK,GAAIC,WAAW,CAACC,UAAU,EAAE,GAAG;IAC5C;IACAjB,KAAK,CAACQ,OAAO,EAAGU,QAAQ,IAAK;MAC3B,IAAIA,QAAQ,EAAE;QACZC,aAAa,CAACJ,MAAM,CAAC;QACrB;MACF;IACF,CAAC,CAAC;;IAGF,MAAMK,QAAO,GAAIrB,GAAG,CAAC,KAAK,CAAC,EAAE;;IAE7B,MAAMsB,MAAK,GAAIpB,SAAS,CAAC,CAAC;;IAE1B;IACA;;IAGA;IACA,MAAMqB,MAAK,GAAIA,CAAA,KAAM;MACnB;MACApB,OAAO,CAACqB,MAAM,CAAC,WAAW,CAAC;MAC3BH,QAAQ,CAACN,KAAI,GAAI,KAAK;MACtBO,MAAM,CAACG,IAAI,CAAC,QAAQ,CAAC,EAAE;IACzB,CAAC;;IAED,MAAMP,UAAS,GAAIA,CAAA,KAAM;MAEvB,IAAIf,OAAO,CAACQ,GAAG,CAAC,WAAW,CAAC,EAAE;QAE5BU,QAAQ,CAACN,KAAI,GAAI,IAAI;;QAErB;MAEF;IAEF;;IACA,MAAMW,KAAI,GAAIT,WAAW,CAACC,UAAU,EAAE,GAAG;IACzC;IACAjB,KAAK,CAACoB,QAAQ,EAAGF,QAAQ,IAAK;MAC5B,IAAIA,QAAQ,EAAE;QACZC,aAAa,CAACM,KAAK,CAAC;QACpB;MACF;IACF,CAAC,CAAC;;IAIF,OAAO;MACLL,QAAQ;MACRE,MAAM;MACNd;IACF,CAAC;EAEH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}