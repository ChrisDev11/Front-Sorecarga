{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cookies from \"js-cookie\";\nimport { addNotification } from '.';\nexport default {\n  name: \"SlidePanel\",\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    visible: {\n      type: Boolean,\n      required: true\n    },\n    cart: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: [\"update:visible\", \"update:cart\"],\n  methods: {\n    closePanel() {\n      this.$emit(\"update:visible\", false);\n    },\n    // Função para remover um item do carrinho\n    removeFromCart(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        if (this.cart[index].quantity > 1) {\n          this.cart[index].quantity--; // Se a quantidade for maior que 1, diminui a quantidade\n        } else {\n          this.cart.splice(index, 1); // Caso contrário, remove o item do carrinho\n        }\n\n        this.saveCartToCookies(); // Salva o carrinho nos cookies após a alteração\n      }\n    },\n\n    // Função para salvar o carrinho nos cookies\n    saveCartToCookies() {\n      Cookies.set(\"cart\", JSON.stringify(this.cart), {\n        expires: 1 / 24\n      }); // Salva o carrinho no cookie com expiração de 1 hora (1/24 representa 1 hora)\n    },\n\n    // Função para aumentar a quantidade de um item no carrinho\n    incrementQuantity(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        this.cart[index].quantity++; // Incrementa a quantidade do item\n        this.saveCartToCookies(); // Salva o carrinho nos cookies após a alteração\n      }\n    },\n\n    // Função para diminuir a quantidade de um item no carrinho\n    decrementQuantity(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1 && this.cart[index].quantity > 1) {\n        this.cart[index].quantity--; // Decrementa a quantidade do item\n        this.saveCartToCookies(); // Salva o carrinho nos cookies após a alteração\n      }\n    },\n\n    // Função para Finalizar compra\n    checkout() {\n      const authToken = Cookies.get(\"authToken\");\n      if (authToken) {\n        // Se houver um authToken nos cookies, redirecione para a próxima página\n        this.$router.push({\n          name: \"checkout\"\n        }); // Substitua \"proximaPagina\" pelo nome da rota desejada\n      } else {\n        //this.$router.push({ name: \"Login\" }); // Redirecionar para a rota de login\n        // Se não houver um authToken, mostre uma notificação\n        addNotification({\n          type: 'warn',\n          // Tipo da notificação (por exemplo, 'info', 'warn', 'error', 'success', etc.)\n          text: 'Faça login ou registre-se para continuar.'\n        });\n      }\n    },\n    // REMOVE TODOS OS ITENS DO CARRINHO DE COMPRAS\n    clearCart() {\n      this.cart.splice(0); // Limpa o carrinho\n\n      // Remova o cookie quando o carrinho estiver vazio\n      Cookies.remove(\"cart\");\n      console.log(this.cart); // Exibe o carrinho vazio no console\n    },\n\n    // Função para remover um item específico do carrinho\n    clearItem(item) {\n      const index = this.cart.findIndex(cartItem => cartItem.id === item.id);\n      if (index !== -1) {\n        this.cart.splice(index, 1); // Remove o item do carrinho\n        this.$emit(\"update:cart\", this.cart); // Emite um evento para atualizar o carrinho no componente pai\n        this.saveCartToCookies(); // Salva o carrinho atualizado nos cookies após a remoção do item\n      }\n    },\n\n    // Função para calcular o valor total do carrinho\n    calculateTotal() {\n      let total = 0;\n      this.cart.forEach(item => {\n        total += item.price * item.quantity;\n      });\n      return total.toFixed(2); // Arredonda o total para 2 casas decimais\n    }\n  }\n};","map":{"version":3,"names":["Cookies","addNotification","name","props","title","type","String","required","visible","Boolean","cart","Array","emits","methods","closePanel","$emit","removeFromCart","item","index","findIndex","cartItem","id","quantity","splice","saveCartToCookies","set","JSON","stringify","expires","incrementQuantity","decrementQuantity","checkout","authToken","get","$router","push","text","clearCart","remove","console","log","clearItem","calculateTotal","total","forEach","price","toFixed"],"sources":["C:\\Users\\11\\Desktop\\frontend\\src\\components\\SlidePanel.vue"],"sourcesContent":["<template>\r\n  <div class=\"panel-wrap\" :class=\"{ visible: visible }\">\r\n    <div class=\"panel\">\r\n      <div class=\"slide-panel\">\r\n        <div class=\"close-button\" @click=\"closePanel()\">X</div>\r\n        <div>\r\n          <h3>Carrinho</h3>\r\n          <ul>\r\n            <li v-for=\"item in cart\" :key=\"item.id\" class=\"cart-item\">\r\n              <div class=\"item-info\">\r\n                <img :src=\"item.image\" alt=\"Imagem do Produto\" />\r\n                {{ item.name }} - R$ {{ item.price * item.quantity }}\r\n              </div>\r\n              <div class=\"item-actions\">\r\n                <div class=\"quantity\">\r\n                  <button\r\n                    class=\"quantity-button\"\r\n                    @click=\"decrementQuantity(item)\"\r\n                  >\r\n                    -\r\n                  </button>\r\n                  <span>{{ item.quantity }}</span>\r\n                  <button\r\n                    class=\"quantity-button\"\r\n                    @click=\"incrementQuantity(item)\"\r\n                  >\r\n                    +\r\n                  </button>\r\n                </div>\r\n                <div class=\"clear-item-button\" @click=\"clearItem(item)\">X</div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div class=\"cart-total\">Total: R$ {{ calculateTotal() }}</div>\r\n          <button class=\"btn btn-danger\" @click=\"clearCart\">Limpar</button>\r\n          <button class=\"checkout-button\" @click=\"checkout\">\r\n            Finalizar Compra\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Cookies from \"js-cookie\";\r\nimport { addNotification } from '.';\r\n\r\n\r\nexport default {\r\n  name: \"SlidePanel\",\r\n  \r\n\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    cart: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n  },\r\n  emits: [\"update:visible\", \"update:cart\"],\r\n\r\n  methods: {\r\n    closePanel() {\r\n      this.$emit(\"update:visible\", false);\r\n    },\r\n    // Função para remover um item do carrinho\r\n    removeFromCart(item) {\r\n      const index = this.cart.findIndex((cartItem) => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        if (this.cart[index].quantity > 1) {\r\n          this.cart[index].quantity--; // Se a quantidade for maior que 1, diminui a quantidade\r\n        } else {\r\n          this.cart.splice(index, 1); // Caso contrário, remove o item do carrinho\r\n        }\r\n\r\n        this.saveCartToCookies(); // Salva o carrinho nos cookies após a alteração\r\n      }\r\n    },\r\n\r\n    // Função para salvar o carrinho nos cookies\r\n    saveCartToCookies() {\r\n      Cookies.set(\"cart\", JSON.stringify(this.cart), { expires: 1 / 24 }); // Salva o carrinho no cookie com expiração de 1 hora (1/24 representa 1 hora)\r\n    },\r\n\r\n    // Função para aumentar a quantidade de um item no carrinho\r\n    incrementQuantity(item) {\r\n      const index = this.cart.findIndex((cartItem) => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        this.cart[index].quantity++; // Incrementa a quantidade do item\r\n        this.saveCartToCookies(); // Salva o carrinho nos cookies após a alteração\r\n      }\r\n    },\r\n\r\n    // Função para diminuir a quantidade de um item no carrinho\r\n    decrementQuantity(item) {\r\n      const index = this.cart.findIndex((cartItem) => cartItem.id === item.id);\r\n\r\n      if (index !== -1 && this.cart[index].quantity > 1) {\r\n        this.cart[index].quantity--; // Decrementa a quantidade do item\r\n        this.saveCartToCookies(); // Salva o carrinho nos cookies após a alteração\r\n      }\r\n    },\r\n    // Função para Finalizar compra\r\n    checkout() {\r\n      const authToken = Cookies.get(\"authToken\");\r\n      \r\n\r\n      if (authToken) {\r\n        // Se houver um authToken nos cookies, redirecione para a próxima página\r\n        this.$router.push({ name: \"checkout\" }); // Substitua \"proximaPagina\" pelo nome da rota desejada\r\n      } else {\r\n        //this.$router.push({ name: \"Login\" }); // Redirecionar para a rota de login\r\n        // Se não houver um authToken, mostre uma notificação\r\n        addNotification({\r\n          type: 'warn', // Tipo da notificação (por exemplo, 'info', 'warn', 'error', 'success', etc.)\r\n          text: 'Faça login ou registre-se para continuar.',\r\n        });\r\n      }\r\n    },\r\n\r\n    // REMOVE TODOS OS ITENS DO CARRINHO DE COMPRAS\r\n    clearCart() {\r\n      this.cart.splice(0); // Limpa o carrinho\r\n\r\n      // Remova o cookie quando o carrinho estiver vazio\r\n      Cookies.remove(\"cart\");\r\n\r\n      console.log(this.cart); // Exibe o carrinho vazio no console\r\n    },\r\n\r\n    // Função para remover um item específico do carrinho\r\n    clearItem(item) {\r\n      const index = this.cart.findIndex((cartItem) => cartItem.id === item.id);\r\n\r\n      if (index !== -1) {\r\n        this.cart.splice(index, 1); // Remove o item do carrinho\r\n        this.$emit(\"update:cart\", this.cart); // Emite um evento para atualizar o carrinho no componente pai\r\n        this.saveCartToCookies(); // Salva o carrinho atualizado nos cookies após a remoção do item\r\n      }\r\n    },\r\n\r\n    // Função para calcular o valor total do carrinho\r\n    calculateTotal() {\r\n      let total = 0;\r\n      this.cart.forEach((item) => {\r\n        total += item.price * item.quantity;\r\n      });\r\n      return total.toFixed(2); // Arredonda o total para 2 casas decimais\r\n    },\r\n    \r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.panel {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: #333;\r\n  color: #eee;\r\n  overflow: auto;\r\n  padding: 1em;\r\n\r\n  &-wrap {\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    width: 30em;\r\n    transform: translateX(100%);\r\n    transition: 0.3s ease-out;\r\n\r\n    &.visible {\r\n      transform: translateX(0);\r\n    }\r\n  }\r\n\r\n  .close-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    color: #ff0000;\r\n  }\r\n\r\n  h3 {\r\n    color: #fff;\r\n  }\r\n\r\n  .cart-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    background-color: #444;\r\n  }\r\n\r\n  .item-info {\r\n    flex: 2;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    img {\r\n      max-width: 50px;\r\n      max-height: 50px;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n\r\n  .item-quantity {\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .quantity-button {\r\n      cursor: pointer;\r\n      font-size: 20px;\r\n      margin: 0 5px;\r\n      color: #fff;\r\n    }\r\n  }\r\n\r\n  .item-price {\r\n    flex: 1;\r\n    color: #fff;\r\n  }\r\n\r\n  .clear-item-button {\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    color: #ff0000;\r\n  }\r\n\r\n  .clear-cart-button {\r\n    margin-top: 20px;\r\n    background-color: #ff0000;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .checkout-button {\r\n    margin-top: 10px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3 ease;\r\n  }\r\n  .checkout-button:hover{\r\n    background-color: #0056b3;\r\n  }\r\n\r\n  .cart-total {\r\n    margin-top: 10px;\r\n    font-size: 18px;\r\n    color: #fff;\r\n    text-align: right;\r\n    padding-right: 20px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";AA6CA,OAAOA,OAAM,MAAO,WAAW;AAC/B,SAASC,eAAc,QAAS,GAAG;AAGnC,eAAe;EACbC,IAAI,EAAE,YAAY;EAGlBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,OAAO,EAAE;MACPH,IAAI,EAAEI,OAAO;MACbF,QAAQ,EAAE;IACZ,CAAC;IACDG,IAAI,EAAE;MACJL,IAAI,EAAEM,KAAK;MACXJ,QAAQ,EAAE;IACZ;EACF,CAAC;EACDK,KAAK,EAAE,CAAC,gBAAgB,EAAE,aAAa,CAAC;EAExCC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC;IACrC,CAAC;IACD;IACAC,cAAcA,CAACC,IAAI,EAAE;MACnB,MAAMC,KAAI,GAAI,IAAI,CAACR,IAAI,CAACS,SAAS,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAC,KAAMJ,IAAI,CAACI,EAAE,CAAC;MAExE,IAAIH,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,IAAI,CAACR,IAAI,CAACQ,KAAK,CAAC,CAACI,QAAO,GAAI,CAAC,EAAE;UACjC,IAAI,CAACZ,IAAI,CAACQ,KAAK,CAAC,CAACI,QAAQ,EAAE,EAAE;QAC/B,OAAO;UACL,IAAI,CAACZ,IAAI,CAACa,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC,EAAE;QAC9B;;QAEA,IAAI,CAACM,iBAAiB,CAAC,CAAC,EAAE;MAC5B;IACF,CAAC;;IAED;IACAA,iBAAiBA,CAAA,EAAG;MAClBxB,OAAO,CAACyB,GAAG,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACjB,IAAI,CAAC,EAAE;QAAEkB,OAAO,EAAE,IAAI;MAAG,CAAC,CAAC,EAAE;IACvE,CAAC;;IAED;IACAC,iBAAiBA,CAACZ,IAAI,EAAE;MACtB,MAAMC,KAAI,GAAI,IAAI,CAACR,IAAI,CAACS,SAAS,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAC,KAAMJ,IAAI,CAACI,EAAE,CAAC;MAExE,IAAIH,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACR,IAAI,CAACQ,KAAK,CAAC,CAACI,QAAQ,EAAE,EAAE;QAC7B,IAAI,CAACE,iBAAiB,CAAC,CAAC,EAAE;MAC5B;IACF,CAAC;;IAED;IACAM,iBAAiBA,CAACb,IAAI,EAAE;MACtB,MAAMC,KAAI,GAAI,IAAI,CAACR,IAAI,CAACS,SAAS,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAC,KAAMJ,IAAI,CAACI,EAAE,CAAC;MAExE,IAAIH,KAAI,KAAM,CAAC,KAAK,IAAI,CAACR,IAAI,CAACQ,KAAK,CAAC,CAACI,QAAO,GAAI,CAAC,EAAE;QACjD,IAAI,CAACZ,IAAI,CAACQ,KAAK,CAAC,CAACI,QAAQ,EAAE,EAAE;QAC7B,IAAI,CAACE,iBAAiB,CAAC,CAAC,EAAE;MAC5B;IACF,CAAC;;IACD;IACAO,QAAQA,CAAA,EAAG;MACT,MAAMC,SAAQ,GAAIhC,OAAO,CAACiC,GAAG,CAAC,WAAW,CAAC;MAG1C,IAAID,SAAS,EAAE;QACb;QACA,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC;UAAEjC,IAAI,EAAE;QAAW,CAAC,CAAC,EAAE;MAC3C,OAAO;QACL;QACA;QACAD,eAAe,CAAC;UACdI,IAAI,EAAE,MAAM;UAAE;UACd+B,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF,CAAC;IAED;IACAC,SAASA,CAAA,EAAG;MACV,IAAI,CAAC3B,IAAI,CAACa,MAAM,CAAC,CAAC,CAAC,EAAE;;MAErB;MACAvB,OAAO,CAACsC,MAAM,CAAC,MAAM,CAAC;MAEtBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC9B,IAAI,CAAC,EAAE;IAC1B,CAAC;;IAED;IACA+B,SAASA,CAACxB,IAAI,EAAE;MACd,MAAMC,KAAI,GAAI,IAAI,CAACR,IAAI,CAACS,SAAS,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAC,KAAMJ,IAAI,CAACI,EAAE,CAAC;MAExE,IAAIH,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACR,IAAI,CAACa,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACH,KAAK,CAAC,aAAa,EAAE,IAAI,CAACL,IAAI,CAAC,EAAE;QACtC,IAAI,CAACc,iBAAiB,CAAC,CAAC,EAAE;MAC5B;IACF,CAAC;;IAED;IACAkB,cAAcA,CAAA,EAAG;MACf,IAAIC,KAAI,GAAI,CAAC;MACb,IAAI,CAACjC,IAAI,CAACkC,OAAO,CAAE3B,IAAI,IAAK;QAC1B0B,KAAI,IAAK1B,IAAI,CAAC4B,KAAI,GAAI5B,IAAI,CAACK,QAAQ;MACrC,CAAC,CAAC;MACF,OAAOqB,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;IAC3B;EAEF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}