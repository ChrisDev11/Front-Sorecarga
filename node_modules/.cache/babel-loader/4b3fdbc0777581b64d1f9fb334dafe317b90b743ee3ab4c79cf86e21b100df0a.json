{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { useRouter } from \"vue-router\";\nimport Cookies from 'js-cookie';\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      credentials: {\n        email: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    async submit() {\n      if (!this.checkValidation()) {\n        return;\n      }\n      try {\n        const response = await axios.post('https://localhost:3000/Users/Login', this.credentials, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Assuming the API returns a token upon successful login\n        const authToken = response.data.token;\n\n        // Store the token in a cookie\n        Cookies.set('authToken', authToken);\n\n        // Redirect to appropriate route after successful login\n        this.$router.push('/dashboard');\n      } catch (error) {\n        console.error('Erro ao fazer login:', error);\n        Swal.fire(\"Login failed. Please check your credentials.\");\n      }\n    },\n    checkValidation() {\n      if (!this.credentials.email) {\n        Swal.fire(\"Please enter your email.\");\n        return false;\n      }\n      if (!this.credentials.password) {\n        Swal.fire(\"Please enter your password.\");\n        return false;\n      }\n      return true;\n    }\n  },\n  setup() {\n    const router = useRouter();\n    return {\n      router\n    };\n  }\n};","map":{"version":3,"names":["axios","Swal","useRouter","Cookies","name","data","credentials","email","password","methods","submit","checkValidation","response","post","headers","authToken","token","set","$router","push","error","console","fire","setup","router"],"sources":["C:\\Users\\11\\Desktop\\frontend\\src\\components\\Login.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <form @submit.prevent=\"submit\">\r\n        <label for=\"email\">Email:</label>\r\n        <input v-model=\"credentials.email\" type=\"email\" id=\"email\" required><br>\r\n        \r\n        <label for=\"password\">Password:</label>\r\n        <input v-model=\"credentials.password\" type=\"password\" id=\"password\" required><br>\r\n        \r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport { useRouter } from \"vue-router\";\r\nimport Cookies from 'js-cookie'; \r\n\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      credentials: {\r\n        email: '',\r\n        password: '',\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    async submit() {\r\n      if (!this.checkValidation()) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post('https://localhost:3000/Users/Login', this.credentials, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n        \r\n        // Assuming the API returns a token upon successful login\r\n        const authToken = response.data.token;\r\n\r\n        // Store the token in a cookie\r\n        Cookies.set('authToken', authToken);\r\n\r\n        // Redirect to appropriate route after successful login\r\n        this.$router.push('/dashboard');\r\n      } catch (error) {\r\n        console.error('Erro ao fazer login:', error);\r\n        Swal.fire(\"Login failed. Please check your credentials.\");\r\n      }\r\n    },\r\n    checkValidation() {\r\n      if (!this.credentials.email) {\r\n        Swal.fire(\"Please enter your email.\");\r\n        return false;\r\n      }\r\n      \r\n      if (!this.credentials.password) {\r\n        Swal.fire(\"Please enter your password.\");\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    },\r\n  },\r\n  setup() {\r\n    const router = useRouter();\r\n\r\n    return {\r\n      router\r\n    };\r\n  }\r\n};\r\n  </script>\r\n\r\n<style scoped>\r\n.container{\r\n    max-width: 360px;\r\n    }\r\n\r\n</style>"],"mappings":";AAeE,OAAOA,KAAI,MAAO,OAAO;AAC3B,OAAOC,IAAG,MAAO,aAAa;AAC9B,SAASC,SAAQ,QAAS,YAAY;AACtC,OAAOC,OAAM,MAAO,WAAW;AAE/B,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;QACXC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,MAAMA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE;QAC3B;MACF;MAEA,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACa,IAAI,CAAC,oCAAoC,EAAE,IAAI,CAACP,WAAW,EAAE;UACxFQ,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;;QAEF;QACA,MAAMC,SAAQ,GAAIH,QAAQ,CAACP,IAAI,CAACW,KAAK;;QAErC;QACAb,OAAO,CAACc,GAAG,CAAC,WAAW,EAAEF,SAAS,CAAC;;QAEnC;QACA,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MACjC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CnB,IAAI,CAACqB,IAAI,CAAC,8CAA8C,CAAC;MAC3D;IACF,CAAC;IACDX,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACL,WAAW,CAACC,KAAK,EAAE;QAC3BN,IAAI,CAACqB,IAAI,CAAC,0BAA0B,CAAC;QACrC,OAAO,KAAK;MACd;MAEA,IAAI,CAAC,IAAI,CAAChB,WAAW,CAACE,QAAQ,EAAE;QAC9BP,IAAI,CAACqB,IAAI,CAAC,6BAA6B,CAAC;QACxC,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb;EACF,CAAC;EACDC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAItB,SAAS,CAAC,CAAC;IAE1B,OAAO;MACLsB;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}